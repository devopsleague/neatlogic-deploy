<?xml version="1.0" encoding="UTF-8"?>
<!--Copyright (C) 2024  深圳极向量科技有限公司 All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.module.deploy.dao.mapper.DeployInstanceVersionMapper">

    <select id="getDeployInstanceVersionByEnvIdAndInstanceIdLock" parameterType="java.lang.Long"
            resultType="neatlogic.framework.deploy.dto.instance.DeployInstanceVersionVo">
        select
            app_system_id as appSystemId,
            app_module_id as appModuleId,
            env_id as envId,
            resource_id as resourceId,
            version_id as versionId,
            build_no as buildNo,
            lcu,
            lcd
        from deploy_instance_version
        where app_system_id = #{appSystemId} and app_module_id = #{appModuleId}
        and env_id = #{envId} and resource_id = #{instanceId}
        for update
    </select>

    <select id="getDeployInstanceVersionByEnvIdAndInstanceIdList"
            resultType="neatlogic.framework.deploy.dto.instance.DeployInstanceVersionVo">
        select
            iv.app_system_id as appSystemId,
            iv.app_module_id as appModuleId,
            iv.env_id as envId,
            iv.resource_id as resourceId,
            iv.version_id as versionId,
            iv.build_no as buildNo,
            iv.lcu,
            iv.lcd,
            v.version
        from deploy_instance_version iv
        join deploy_version v ON v.id = iv.version_id
        where iv.app_system_id = #{appSystemId} and iv.app_module_id = #{appModuleId}
          and iv.env_id = #{envId}
          and iv.resource_id in
        <foreach collection="instanceIdList" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <select id="getDeployInstanceOldestVersionByInstanceIdAndNewVersionId"
            resultType="neatlogic.framework.deploy.dto.instance.DeployInstanceVersionAuditVo">
        select
            id,
            app_system_id as appSystemId,
            app_module_id as appModuleId,
            env_id as envId,
            resource_id as resourceId,
            new_version_id as newVersionId,
            old_version_id as oldVersionId,
            new_build_no as newBuildNo,
            old_build_no as oldBuildNo,
            direction,
            fcu,
            fcd
        from deploy_instance_version_audit
        where app_system_id = #{appSystemId} and app_module_id = #{appModuleId}
        and env_id = #{envId} and resource_id = #{instanceId} and new_version_id = #{newVersionId}
        order by id asc
        limit 1
    </select>

    <insert id="insertDeployInstanceVersion" parameterType="neatlogic.framework.deploy.dto.instance.DeployInstanceVersionVo">
        insert into deploy_instance_version (
            app_system_id,
            app_module_id,
            env_id,
            resource_id,
            version_id,
            build_no,
            lcu,
            lcd
        ) values (
            #{appSystemId},
            #{appModuleId},
            #{envId},
            #{resourceId},
            #{versionId},
            #{buildNo},
            #{lcu},
            <choose>
                  <when test="lcd != null">
                      #{lcd}
                  </when>
                  <otherwise>
                      now(3)
                  </otherwise>
            </choose>
        ) ON DUPLICATE KEY UPDATE
            version_id = #{versionId},
            build_no = #{buildNo},
            lcu = #{lcu},
            <choose>
                <when test="lcd != null">
                    lcd = #{lcd}
                </when>
                <otherwise>
                    lcd = now(3)
                </otherwise>
            </choose>
    </insert>

    <insert id="insertDeployInstanceVersionAudit">
        insert into deploy_instance_version_audit (
            id,
            app_system_id,
            app_module_id,
            env_id,
            resource_id,
            new_version_id,
            old_version_id,
            new_build_no,
            old_build_no,
            direction,
            fcu,
            fcd
        ) values (
            #{id},
            #{appSystemId},
            #{appModuleId},
            #{envId},
            #{resourceId},
            #{newVersionId},
            #{oldVersionId},
            #{newBuildNo},
            #{oldBuildNo},
            #{direction},
            #{fcu},
            now(3)
        )
    </insert>

    <delete id="deleteDeployInstanceVersionByVersionId">
        delete from deploy_instance_version where version_id = #{value}
    </delete>

    <delete id="deleteDeployInstanceVersionAuditByVersionId">
        delete from deploy_instance_version_audit where new_version_id = #{value} or old_version_id = #{value}
    </delete>
</mapper>