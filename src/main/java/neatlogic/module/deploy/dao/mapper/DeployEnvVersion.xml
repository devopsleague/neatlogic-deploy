<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright(c) 2023 NeatLogic Co., Ltd. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.module.deploy.dao.mapper.DeployEnvVersionMapper">

    <select id="getDeployEnvVersionByEnvIdLock" parameterType="java.lang.Long"
            resultType="neatlogic.framework.deploy.dto.env.DeployEnvVersionVo">
        select
            app_system_id as appSystemId,
            app_module_id as appModuleId,
            env_id as envId,
            version_id as versionId,
            build_no as buildNo,
            lcu,
            lcd
        from deploy_env_version where app_system_id = #{appSystemId} and app_module_id = #{appModuleId} and env_id = #{envId}
        for update
    </select>

    <select id="getDeployEnvVersionBySystemId"
            resultType="neatlogic.framework.deploy.dto.env.DeployEnvVersionVo">
        SELECT
            a.app_system_id AS appSystemId,
            a.app_module_id AS appModuleId,
            a.env_id AS envId,
            a.version_id AS versionId,
            b.version
        FROM
            deploy_env_version a JOIN deploy_version b ON a.version_id = b.id
        WHERE
            a.app_system_id = #{value}
    </select>

    <select id="getDeployEnvOldestVersionByEnvIdAndNewVersionId"
            resultType="neatlogic.framework.deploy.dto.env.DeployEnvVersionAuditVo">
        select
            id,
            app_system_id as appSystemId,
            app_module_id as appModuleId,
            env_id as envId,
            new_version_id as newVersionId,
            old_version_id as oldVersionId,
            new_build_no as newBuildNo,
            old_build_no as oldBuildNo,
            direction,
            fcu,
            fcd
        from deploy_env_version_audit where app_system_id = #{appSystemId} and app_module_id = #{appModuleId} and env_id = #{envId} and new_version_id = #{newVersionId}
        order by id asc
        limit 1
    </select>

    <select id="getDeployEnvVersionAuditBySystemId" parameterType="java.lang.Long"
            resultType="neatlogic.framework.deploy.dto.env.DeployEnvVersionAuditVo">
        select
            id,
            app_system_id as appSystemId,
            app_module_id as appModuleId,
            env_id as envId,
            new_version_id as newVersionId,
            old_version_id as oldVersionId,
            new_build_no as newBuildNo,
            old_build_no as oldBuildNo,
            direction,
            fcu,
            fcd
        from deploy_env_version_audit where app_system_id = #{value}
    </select>

    <select id="getDeployEnvVersionAuditBySystemIdAndModueIdAndEnvId"
            resultType="neatlogic.framework.deploy.dto.env.DeployEnvVersionAuditVo">
        select
            id,
            app_system_id as appSystemId,
            app_module_id as appModuleId,
            env_id as envId,
            new_version_id as newVersionId,
            old_version_id as oldVersionId,
            new_build_no as newBuildNo,
            old_build_no as oldBuildNo,
            direction,
            fcu,
            fcd
        from deploy_env_version_audit where app_system_id = #{appSystemId} and app_module_id = #{appModuleId} and env_id = #{envId}
        order by id desc
    </select>

    <insert id="insertDeployEnvVersion" parameterType="neatlogic.framework.deploy.dto.env.DeployEnvVersionVo">
        insert into deploy_env_version (
            app_system_id,
            app_module_id,
            env_id,
            version_id,
            build_no,
            lcu,
            lcd
        ) values (
            #{appSystemId},
            #{appModuleId},
            #{envId},
            #{versionId},
            #{buildNo},
            #{lcu},
            <choose>
                <when test="lcd != null">
                    #{lcd}
                </when>
                <otherwise>
                    now(3)
                </otherwise>
            </choose>
        ) ON DUPLICATE KEY UPDATE
            version_id = #{versionId},
            build_no = #{buildNo},
            lcu = #{lcu},
            <choose>
                <when test="lcd != null">
                    lcd = #{lcd}
                </when>
                <otherwise>
                    lcd = now(3)
                </otherwise>
            </choose>
    </insert>

    <insert id="insertDeployEnvVersionAudit">
        insert into deploy_env_version_audit (
            id,
            app_system_id,
            app_module_id,
            env_id,
            new_version_id,
            old_version_id,
            new_build_no,
            old_build_no,
            direction,
            fcu,
            fcd
        ) values (
            #{id},
            #{appSystemId},
            #{appModuleId},
            #{envId},
            #{newVersionId},
            #{oldVersionId},
            #{newBuildNo},
            #{oldBuildNo},
            #{direction},
            #{fcu},
            now(3)
        )
    </insert>

    <delete id="deleteDeployEnvVersionByVersionId" parameterType="java.lang.Long">
        delete from deploy_env_version where version_id = #{value}
    </delete>

    <delete id="deleteDeployEnvVersionAuditByVersionId" parameterType="java.lang.Long">
        delete from deploy_env_version_audit where new_version_id = #{value} or old_version_id = #{value}
    </delete>
</mapper>