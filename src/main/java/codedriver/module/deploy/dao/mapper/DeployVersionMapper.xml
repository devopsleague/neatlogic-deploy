<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright(c) 2022 TechSureCo.,Ltd.AllRightsReserved.
  ~ 本内容仅限于深圳市赞悦科技有限公司内部传阅，禁止外泄以及用于其他的商业项目。
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="codedriver.module.deploy.dao.mapper.DeployVersionMapper">

    <select id="checkDeployVersionIsRepeat" resultType="int">
        select count(id)
        from deploy_version
        where id != #{id}
          and app_system_id = #{appSystemId}
          and app_module_id = #{appModuleId}
          and version = #{version}
    </select>

    <select id="getDeployVersionById" resultType="codedriver.framework.deploy.dto.version.DeployVersionVo">
        select id,
               version,
               app_system_id   as appSystemId,
               app_system_name as appSystemName,
               app_module_id   as appModuleId,
               app_module_name as appModuleName,
               is_freeze       as isFreeze,
               runner_map_id   as runnerMapId,
               runner_group    as runnerGroupStr,
               fcu,
               fcd,
               lcu,
               lcd
        from deploy_version
        where id = #{id}
    </select>

    <select id="searchDeployVersionCount" resultType="java.lang.Integer">
        select count(dv.id)
        from deploy_version dv
        <include refid="searchVersionWhere"></include>
    </select>

    <sql id="searchVersionWhere">
        <where>
            <if test="keyword != null and keyword != ''">
                and dv.`version` like CONCAT('%', #{keyword}, '%')
            </if>
            <if test="isFreeze != null">
                and dv.is_freeze = #{isFreeze}
            </if>
            <if test="appSystemIdList != null and appSystemIdList.size() > 0">
                AND dv.app_system_id IN
                <foreach collection="appSystemIdList" item="appSystemId" open="(" separator="," close=")">
                    #{appSystemId}
                </foreach>
            </if>
            <if test="appModuleIdList != null and appModuleIdList.size() > 0">
                AND dv.app_module_id IN
                <foreach collection="appModuleIdList" item="appModuleId" open="(" separator="," close=")">
                    #{appModuleId}
                </foreach>
            </if>
            <if test="defaultValue != null and defaultValue.size() > 0">
                AND dv.id IN
                <foreach collection="defaultValue" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
            <if test="startTimeRange != null and startTimeRange.size() == 2">
                and (
                dv.`fcd` &gt;= FROM_UNIXTIME(#{startTimeRange[0]})
                and
                dv.`fcd` &lt;= FROM_UNIXTIME(#{startTimeRange[1]})
                )
            </if>
        </where>
    </sql>

    <resultMap id="deployVersionMap" type="codedriver.framework.deploy.dto.version.DeployVersionVo">
        <id column="id" property="id"/>
        <result column="version" property="version"/>
        <result column="appSystemId" property="appSystemId"/>
        <result column="appSystemName" property="appSystemName"/>
        <result column="appModuleId" property="appModuleId"/>
        <result column="appModuleName" property="appModuleName"/>
        <result column="isFreeze" property="isFreeze"/>
        <result column="fcu" property="fcu"/>
        <result column="fcd" property="fcd"/>
        <result column="lcu" property="lcu"/>
        <result column="lcd" property="lcd"/>
        <collection property="buildNoList" ofType="codedriver.framework.deploy.dto.version.DeployVersionBuildNoVo">
            <result column="buildNo" property="buildNo"/>
            <result column="buildNoStatus" property="status"/>
        </collection>
        <collection property="envList" ofType="codedriver.framework.deploy.dto.version.DeployVersionEnvVo">
            <id column="envId" property="envId"/>
            <result column="envName" property="envName"/>
            <result column="envStatus" property="status"/>
        </collection>
    </resultMap>

    <select id="searchDeployVersion" resultMap="deployVersionMap">
        select
        dv.id,
        dv.version,
        dv.app_system_id as appSystemId,
        dv.app_system_name as appSystemName,
        dv.app_module_id as appModuleId,
        dv.app_module_name as appModuleName,
        dv.is_freeze as isFreeze,
        dvb.build_no as buildNo,
        dvb.status as buildNoStatus,
        dve.env_id as envId,
        cc.name as envName,
        dve.status as envStatus,
        dv.fcu,
        dv.fcd,
        dv.lcu,
        dv.lcd
        from deploy_version dv
        left join deploy_version_buildno dvb on dvb.version_id = dv.id
        left join deploy_version_env dve on dve.version_id = dv.id
        left join cmdb_cientity cc on cc.id = dve.env_id
        <include refid="searchVersionWhere"></include>
        ORDER BY dv.fcd DESC, dvb.compile_start_time DESC
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <select id="getJobIdByDeployVersionIdAndBuildNo" resultType="java.lang.Long">
        SELECT `job_id`
        FROM `deploy_version_buildno`
        WHERE `version_id` = #{versionId}
          AND `build_no` = #{buildNo}
    </select>

    <select id="getJobIdByDeployVersionIdAndEnvId" resultType="java.lang.Long">
        SELECT `job_id`
        FROM `deploy_version_env`
        WHERE `version_id` = #{versionId}
          AND `env_id` = #{envId}
    </select>
    <select id="getVersionByAppSystemIdAndAppModuleIdAndVersion"
            resultType="codedriver.framework.deploy.dto.version.DeployVersionVo">
        select id,
               version,
               app_system_id   as appSystemId,
               app_system_name as appSystemName,
               app_module_id   as appModuleId,
               app_module_name as appModuleName,
               is_freeze       as isFreeze,
               fcu,
               fcd,
               lcu,
               lcd
        from deploy_version
        where app_system_id = #{appSystemId}
          and app_module_id = #{appModuleId}
          and version = #{version}
    </select>

    <select id="getDeployVersionMaxBuildNoByVersionIdLock" resultType="java.lang.Integer">
        select max(build_no) from deploy_version_buildno where version_id = #{value} for update
    </select>

    <select id="getDeployVersionBySystemIdAndModuleIdAndVersionLock" parameterType="codedriver.framework.deploy.dto.version.DeployVersionVo"
            resultType="codedriver.framework.deploy.dto.version.DeployVersionVo">
        select id,
               version,
               app_system_id   as appSystemId,
               app_system_name as appSystemName,
               app_module_id   as appModuleId,
               app_module_name as appModuleName,
               is_freeze       as isFreeze,
               repo_type       as repoType,
               repo            as repo,
               trunk           as trunk,
               branch          as branch,
               tag             as tag,
               tags_dir        as tagsDir,
               start_rev       as startRev,
               end_rev         as endRev,
               fcu,
               fcd,
               lcu,
               lcd
        from deploy_version
        where version = #{version} and app_system_id = #{appSystemId} and app_module_id = #{appModuleId}
        for update
    </select>

    <select id="getDeployVersionBuildNoListCount" resultType="java.lang.Integer">
        SELECT count(dvb.build_no)
        <include refid="searchDeployVersionBuildNo"></include>
    </select>

    <select id="searchDeployVersionBuildNoList"
            resultType="codedriver.framework.deploy.dto.version.DeployVersionBuildNoVo">
        SELECT dvb.build_no AS buildNo,
        dvb.status AS status,
        dvb.compile_start_time AS compileStartTime,
        dvb.compile_end_time AS compileEndTime,
        dv.id as versionId,
        dv.version,
        dv.is_freeze AS versionIsFreeze
        <include refid="searchDeployVersionBuildNo"></include>
        ORDER BY dvb.compile_start_time DESC
        <if test="needPage == true">
            LIMIT #{startNum}, #{pageSize}
        </if>
    </select>

    <sql id="searchDeployVersionBuildNo">
        FROM deploy_version_buildno dvb
        LEFT JOIN deploy_version dv ON dv.id = dvb.version_id
        <where>
            <if test="keyword != null and keyword != ''">
                and dv.`version` like CONCAT('%', #{keyword}, '%')
            </if>
            <if test="startTimeRange != null and startTimeRange.size() == 2">
                and (
                dvb.compile_start_time &gt;= FROM_UNIXTIME(#{startTimeRange[0]})
                and
                dvb.compile_start_time &lt;= FROM_UNIXTIME(#{startTimeRange[1]})
                )
            </if>
            <if test="appSystemIdList != null and appSystemIdList.size() > 0">
                AND dv.app_system_id IN
                <foreach collection="appSystemIdList" item="systemId" open="(" separator="," close=")">
                    #{systemId}
                </foreach>
            </if>
            <if test="appModuleIdList != null and appModuleIdList.size() > 0">
                AND dv.app_module_id IN
                <foreach collection="appModuleIdList" item="moduleId" open="(" separator="," close=")">
                    #{moduleId}
                </foreach>
            </if>
        </where>
    </sql>

    <select id="getDeployVersionBuildNoByVersionIdAndBuildNo" resultType="codedriver.framework.deploy.dto.version.DeployVersionBuildNoVo">
        select
        version_id as versionId,
        build_no   as buildNo,
        job_id     as jobId,
        status,
        compile_start_time as compileStartTime,
        compile_end_time as compileEndTime,
        compile_end_time as compileEndTime,
        runner_map_id as runnerMapId,
        runner_group as runnerGroupStr,
        end_rev as endRev
        from deploy_version_buildno
        where version_id = #{versionId} and build_no = #{buildNo}
    </select>

    <select id="getDeployVersionEnvByVersionIdAndEnvId"
            resultType="codedriver.framework.deploy.dto.version.DeployVersionEnvVo">
        select
        version_id as versionId,
        env_id as envId,
        job_id as jobId,
        status as status,
        runner_map_id as runnerMapId,
        runner_group as runnerGroupStr,
        build_no as buildNo,
        is_mirror as isMirror
        from deploy_version_env
        where version_id = #{versionId} and env_id = #{envId}
    </select>

    <update id="unFreezeDeployVersionById">
        update deploy_version
        set is_freeze = #{isFreeze}
        where id = #{id}
    </update>

    <update id="updateDeployVersionInfoById" parameterType="codedriver.framework.deploy.dto.version.DeployVersionVo">
        update deploy_version set
        <if test="repoType != null and repoType != ''">
            repo_type = #{repoType},
        </if>
        <if test="repo != null and repo != ''">
            repo = #{repo},
        </if>
        <if test="trunk != null and trunk != ''">
            trunk = #{trunk},
        </if>
        <if test="branch != null and branch != ''">
            branch = #{branch},
        </if>
        <if test="tag != null and tag != ''">
            tag = #{tag},
        </if>
        <if test="tagsDir != null and tagsDir != ''">
            tags_dir = #{tagsDir},
        </if>
        <if test="isFreeze != null">
            is_freeze = #{isFreeze},
        </if>
        <if test="startRev != null and startRev != ''">
            start_rev = #{startRev},
        </if>
        <if test="endRev != null and endRev != ''">
            end_rev = #{endRev},
        </if>
        <if test="runnerMapId != null">
            runner_map_id = #{runnerMapId},
        </if>
        <if test="runnerGroupStr != null and runnerGroupStr != ''">
            runner_group = #{runnerGroupStr},
        </if>
        lcu = #{lcu},
        lcd = now(3)
        where id = #{id}
    </update>

    <update id="updateDeployVersionBuildNoByVersionIdAndBuildNo" parameterType="codedriver.framework.deploy.dto.version.DeployVersionBuildNoVo">
        update deploy_version_buildno set
        <if test="runnerMapId != null">
            runner_map_id = #{runnerMapId},
        </if>
        <if test="runnerGroupStr != null and runnerGroupStr != ''">
            runner_group = #{runnerGroupStr},
        </if>
        <if test="endRev != null and endRev != ''">
            end_rev = #{endRev},
        </if>
        <if test="status != null and status != ''">
            status = #{status},
        </if>
        lcu = #{lcu},
        lcd = now(3)
        where version_id = #{versionId} and build_no = #{buildNo}
    </update>

    <update id="updateDeployVersionEnvInfo" parameterType="codedriver.framework.deploy.dto.version.DeployVersionEnvVo">
        update deploy_version_env set
        <if test="status != null and status != ''">
            status = #{status},
        </if>
        <if test="runnerMapId != null">
            runner_map_id = #{runnerMapId},
        </if>
        <if test="runnerGroupStr != null and runnerGroupStr != ''">
            runner_group = #{runnerGroupStr},
        </if>
        <if test="buildNo != null">
            build_no = #{buildNo},
        </if>
        <if test="isMirror != null">
            is_mirror = #{isMirror},
        </if>
        lcu = #{lcu},
        lcd = now(3)
        where version_id = #{versionId} and env_id = #{envId}
    </update>

    <insert id="insertDeployVersion">
        insert into deploy_version
        (id, version, app_system_id, app_system_name, app_module_id, app_module_name, is_freeze, fcu, fcd, lcu,
         lcd)
        values (#{id}, #{version}, #{appSystemId}, #{appSystemName}, #{appModuleId}, #{appModuleName},
                #{isFreeze},
                #{fcu}, now(3), #{lcu}, now(3))
    </insert>

    <insert id="insertDeployVersionEnv" parameterType="codedriver.framework.deploy.dto.version.DeployVersionEnvVo">
        insert into deploy_version_env(
            version_id,
            env_id,
            job_id,
            status,
            runner_map_id,
            runner_group,
            build_no,
            is_mirror,
            lcu,
            lcd
        )values(
            #{versionId},
            #{envId},
            #{jobId},
            #{status},
            #{runnerMapId},
            #{runnerGroupStr},
            #{buildNo},
            #{isMirror},
            #{lcu},
            now(3)
        )
    </insert>

    <insert id="insertDeployVersionBuildQuality" parameterType="codedriver.framework.deploy.dto.version.DeployVersionBuildQualityVo">
        INSERT INTO deploy_build_quality (
            app_module_id,
            version_id,
            build_time,
            files,
            classes,
            lines,
            ncloc,
            functions,
            statements,
            complexity,
            file_complexity,
            class_complexity,
            function_complexity,
            violations,
            blocker_violations,
            critical_violations,
            major_violations,
            minor_violations,
            executable_lines_data,
            it_conditions_to_cover,
            it_branch_coverage,
            it_conditions_by_line,
            it_coverage,
            it_coverage_line_hits_data,
            it_covered_conditions_by_line,
            it_line_coverage,
            it_lines_to_cover,
            comment_lines_density,
            public_documented_api_density,
            duplicated_files,
            duplicated_lines,
            duplicated_lines_density,
            new_duplicated_lines,
            new_duplicated_lines_density,
            duplicated_blocks,
            new_duplicated_blocks,
            tests,
            test_success_density,
            test_errors,
            branch_coverage,
            new_branch_coverage,
            line_coverage,
            new_line_coverage,
            bugs,
            vulnerabilities,
            code_smells
        )
        VALUES
        (
            #{appModuleId},
            #{versionId},
            NOW(3),
            #{files},
            #{classes},
            #{lines},
            #{ncloc},
            #{functions},
            #{statements},
            #{complexity},
            #{fileComplexity},
            #{classComplexity},
            #{functionComplexity},
            #{violations},
            #{blockerViolations},
            #{criticalViolations},
            #{majorViolations},
            #{minorViolations},
            #{executableLinesData},
            #{itConditionsToCover},
            #{itVranchCoverage},
            #{itConditionsByLine},
            #{itCoverage},
            #{itCoverageLineHitsData},
            #{itCoveredConditionsByLine},
            #{itLineCoverage},
            #{itLinesToCover},
            #{commentLinesDensity},
            #{publicDocumentedApiDensity},
            #{duplicatedFiles},
            #{duplicatedLines},
            #{duplicatedLinesDensity},
            #{newDuplicatedLines},
            #{newDuplicatedLinesDensity},
            #{duplicatedBlocks},
            #{newDuplicatedBlocks},
            #{tests},
            #{testSuccessDensity},
            #{testErrors},
            #{branchCoverage},
            #{newBranchCoverage},
            #{lineCoverage},
            #{newLineCoverage},
            #{bugs},
            #{vulnerabilities},
            #{codeSmells}
        ) ON DUPLICATE KEY UPDATE
            app_module_id = #{appModuleId},
            build_time = NOW(3),
            files = #{files},
            classes = #{classes},
            lines = #{lines},
            ncloc = #{ncloc},
            functions = #{functions},
            statements = #{statements},
            complexity = #{complexity},
            file_complexity = #{fileComplexity},
            class_complexity = #{classComplexity},
            function_complexity = #{functionComplexity},
            violations = #{violations},
            blocker_violations = #{blockerViolations},
            critical_violations = #{criticalViolations},
            major_violations = #{majorViolations},
            minor_violations = #{minorViolations},
            executable_lines_data = #{executableLinesData},
            it_conditions_to_cover = #{itConditionsToCover},
            it_branch_coverage = #{itVranchCoverage},
            it_conditions_by_line = #{itConditionsByLine},
            it_coverage = #{itCoverage},
            it_coverage_line_hits_data = #{itCoverageLineHitsData},
            it_covered_conditions_by_line = #{itCoveredConditionsByLine},
            it_line_coverage = #{itLineCoverage},
            it_lines_to_cover = #{itLinesToCover},
            comment_lines_density = #{commentLinesDensity},
            public_documented_api_density = #{publicDocumentedApiDensity},
            duplicated_files = #{duplicatedFiles},
            duplicated_lines = #{duplicatedLines},
            duplicated_lines_density = #{duplicatedLinesDensity},
            new_duplicated_lines = #{newDuplicatedLines},
            new_duplicated_lines_density = #{newDuplicatedLinesDensity},
            duplicated_blocks = #{duplicatedBlocks},
            new_duplicated_blocks = #{newDuplicatedBlocks},
            tests = #{tests},
            test_success_density = #{testSuccessDensity},
            test_errors = #{testErrors},
            branch_coverage = #{branchCoverage},
            new_branch_coverage = #{newBranchCoverage},
            line_coverage = #{lineCoverage},
            new_line_coverage = #{newLineCoverage},
            bugs = #{bugs},
            vulnerabilities = #{vulnerabilities},
            code_smells = #{codeSmells}
    </insert>

    <insert id="insertDeployVersionBuildQualityLog" parameterType="codedriver.framework.deploy.dto.version.DeployVersionBuildQualityVo">
        INSERT INTO deploy_build_quality (
            app_module_id,
            version_id,
            build_time,
            files,
            classes,
            lines,
            ncloc,
            functions,
            statements,
            complexity,
            file_complexity,
            class_complexity,
            function_complexity,
            violations,
            blocker_violations,
            critical_violations,
            major_violations,
            minor_violations,
            executable_lines_data,
            it_conditions_to_cover,
            it_branch_coverage,
            it_conditions_by_line,
            it_coverage,
            it_coverage_line_hits_data,
            it_covered_conditions_by_line,
            it_line_coverage,
            it_lines_to_cover,
            comment_lines_density,
            public_documented_api_density,
            duplicated_files,
            duplicated_lines,
            duplicated_lines_density,
            new_duplicated_lines,
            new_duplicated_lines_density,
            duplicated_blocks,
            new_duplicated_blocks,
            tests,
            test_success_density,
            test_errors,
            branch_coverage,
            new_branch_coverage,
            line_coverage,
            new_line_coverage,
            bugs,
            vulnerabilities,
            code_smells
        )
        VALUES
        (
            #{appModuleId},
            #{versionId},
            NOW(3),
            #{files},
            #{classes},
            #{lines},
            #{ncloc},
            #{functions},
            #{statements},
            #{complexity},
            #{fileComplexity},
            #{classComplexity},
            #{functionComplexity},
            #{violations},
            #{blockerViolations},
            #{criticalViolations},
            #{majorViolations},
            #{minorViolations},
            #{executableLinesData},
            #{itConditionsToCover},
            #{itVranchCoverage},
            #{itConditionsByLine},
            #{itCoverage},
            #{itCoverageLineHitsData},
            #{itCoveredConditionsByLine},
            #{itLineCoverage},
            #{itLinesToCover},
            #{commentLinesDensity},
            #{publicDocumentedApiDensity},
            #{duplicatedFiles},
            #{duplicatedLines},
            #{duplicatedLinesDensity},
            #{newDuplicatedLines},
            #{newDuplicatedLinesDensity},
            #{duplicatedBlocks},
            #{newDuplicatedBlocks},
            #{tests},
            #{testSuccessDensity},
            #{testErrors},
            #{branchCoverage},
            #{newBranchCoverage},
            #{lineCoverage},
            #{newLineCoverage},
            #{bugs},
            #{vulnerabilities},
            #{codeSmells}
        )
    </insert>

    <delete id="deleteDeployVersionById">
        delete
        from deploy_version
        where id = #{id}
    </delete>

    <delete id="deleteDeployVersionBuildNoByVersionId" parameterType="java.lang.Long">
        delete
        from deploy_version_buildno
        where version_id = #{value}
    </delete>

    <delete id="deleteDeployVersionEnvByVersionId" parameterType="java.lang.Long">
        delete
        from deploy_version_env
        where version_id = #{value}
    </delete>

    <delete id="deleteDeployVersionBuildNoByVersionIdAndBuildNo">
        delete
        from deploy_version_buildno
        where version_id = #{versionId} and build_no = #{buildNo}
    </delete>
</mapper>